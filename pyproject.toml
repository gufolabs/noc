[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61.2", "wheel"]

[project]
authors = [{name = "Gufo Labs"}]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "Programming Language :: Rust",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Networking",
  "Topic :: System :: Networking :: Monitoring",
  "Operating System :: POSIX :: Linux",
  "Typing :: Typed",
]
description = "NOC is an Operation Support System (OSS) for telecom companies, service providers, and enterprise Network Operation Centers"
dynamic = ["version"]
keywords = ["monitoring", "inventory", "fault management", "performance management", "ipam"]
license = {file = "LICENSE.md"}
name = "noc"
requires-python = ">=3.9"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.urls]
"Bug Tracker" = "https://github.com/gufolabs/gufo_snmp/issues"
Changelog = "https://github.com/gufolabs/gufo_snmp/blob/master/CHANGELOG.md"
Documentation = "https://docs.gufolabs.com/gufo_snmp/"
Homepage = "https://github.com/gufolabs/gufo_snmp/"
"Source Code" = "https://github.com/gufolabs/gufo_snmp/"

[tool.setuptools]
include-package-data = true
package-dir = {"" = "."}
zip-safe = false

[tool.setuptools.packages.find]
namespaces = true
where = ["src"]

[tool.setuptools.dynamic]
version = {file = "VERSION"}

[tool.setuptools.package-data]
"noc" = ["py.typed", "**/*.j2"]

[tool.black]
line-length = 100 # Must be same as tool.ruff.line-length
target-version = ['py310'] 

[tool.coverage.run]
omit = ['*tests*']

[tool.coverage.report]
ignore_errors = true

[tool.coverage.html]
directory = "build/coverage"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [".git", "build", "dist", "var", "share", "collections", "node_modules", "ansible"] 
line-length = 100 # Must be same as tool.black.line-length
# Assume Python 3.10
target-version = "py310"
# Enable
lint.select = [
  # "E", # Pycodestyle Error
  "F", # Pyflakes
  "W", # Pycodestyle Warning
  # "C90", # mccabe
  # "I", # isort
  # "D", # Pydocstyle
  "YTT", # flake8-2020
  # "ANN", # flake8-annotations
  # "S", # flake8-bandit
  # "BLE", # flake8-blind-except
  # "B", # flake8-bugbear
  "A", # flake8-builtins
  "C4", # flake8-comprehensions 
  # "EM", # flake8-errmsg
  "ISC", # flake8-implicit-str-concat
  # "ICN", # flake8-import-conventions
  # "PT", # flake8-pytest-style
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "PLC", # pylint
  "PLE", # pylint
  "PLR", # pylint
  # "PLW", # pylint
  "PIE", # flake8-pie
  "RUF", # ruff specific
]
# Always autofix, but never try to fix `F401` (unused imports).
fix = false #fix = true
lint.ignore = [
  "A001", # A001 Variable `{name}` is shadowing a python builtin
  "A002", # A002 Argument `{name}` is shadowing a python builtin
  "A003", # Class attribute `{name}` is shadowing a python builtin"
  "A004", # Import `sum` is shadowing a Python builtin
  "D203",
  "D212",
  "D107",
  "PLR0912", # Too many branches
  "PLR0911", # Too many return statements
  "PLR0913", # Too many arguments to function call
  "PLR0915", # Too many statements
  "PLR2004", # Magic value used in comparison, consider replacing {v} with a constant variable
  "PLR1704", # Redefining argument with the local name `name`
  "RET503", # Missing explicit `return` at the end of function able to return non-`None` value
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  "SIM103", # Return the condition `bool(not set(self.labels) - set(labels))` directly
  "SIM105", # Use `contextlib.suppress(KeyError)` instead of `try`-`except`-`pass`
  "SIM108", # Use ternary operator `mib_name = name[0].split("::", 1)[0] if isinstance(name, tuple) else name.split("::", 1)[0]` instead of `if`-`else`-block
  "SIM112", # Use capitalized environment variable `FTP_PROXY` instead of `ftp_proxy`
  "SIM113", # Use `enumerate()` for index variable `n` in `for` loop
  "SIM114", # Combine `if` branches using logical `or` operator
  "SIM115", # Use a context manager for opening files
  "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
  "SIM118", # Use `key in dict` instead of `key in dict.keys()`
  "SIM201", # Use `data_c[0][4] != data_c[1][4]` instead of `not data_c[0][4] == data_c[1][4]`
  "SIM210", # Remove unnecessary `True if ... else False`
  "SIM211", # Use `not ...` instead of `False if ... else True`
  "PIE790", # Unnecessary `pass` statement
  "PIE804", # Unnecessary `dict` kwargs
  "PIE808", # Unnecessary `start` argument in `range`
  "PIE810", # Call `startswith` once with a `tuple`
  "PLC0206", # Extracting value from dictionary without calling `.items()`
  "PLC1802", # `len(left)` used as condition without comparison
  "PLC0415", # `import` should be at the top-level of a file
  "RUF001", # String contains ambiguous `Ð¢` (CYRILLIC CAPITAL LETTER TE). Did you mean `T` (LATIN CAPITAL LETTER T)?
  "RUF006", # Store a reference to the return value of `asyncio.create_task`
  "RUF009", # Do not perform function call `Layout` in dataclass defaults
  "RUF010", # Use explicit conversion flag
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "RUF013", # PEP 484 prohibits implicit `Optional`
  "RUF019", # Unnecessary key check before dictionary access
  "RUF021", # Parenthesize `a and b` expressions when chaining `and` and `or` together, to make the precedence clear
  "RUF034", # Useless `if`-`else` condition
  "RUF051", # Use `pop` instead of `key in dict` followed by `del dict[key]`  
  "RUF059", # Unpacked variable `epsilon` is never used
  "RUF100", # Unused blanket `noqa` directive
] 
lint.unfixable = [
  "F401",
  "F841", # unused-variable
] 

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"*/migrations/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
]
"cmibs/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
]
"tests/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "S101", # Use of assert detected
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
  "PT011", # {exc} is to broad
]
